
import { useEffect, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
} from "recharts";
import "./VulnerabilityChart.css";

interface Vulnerability {
  id: string;
  cvss: string;
}

const COLORS = [
  "#FF6B6B", "#FCA311", "#F9C74F", "#90BE6D",
  "#43AA8B", "#577590", "#277DA1", "#4D908E",
  "#F94144", "#9B5DE5"
];

export default function VulnerabilityChart() {
  const [data, setData] = useState<{ score: number; count: number }[]>([]);

 useEffect(() => {
  fetch("http://127.0.0.1:8000/group")
    .then((res) => {
      if (!res.ok) throw new Error("Failed to fetch data");
      return res.json();
    })
    .then((json) => {
      const rawGroups = Object.values(json?.grouped_data?.by_type || {});
      const flat: Vulnerability[] = rawGroups.flatMap((group: any) =>
        Array.isArray(group) ? group : []
      );

      const countMap: Record<number, number> = {};

      flat.forEach((vuln) => {
        const score = parseFloat(vuln?.cvss);
        if (!isNaN(score)) {
          countMap[score] = (countMap[score] || 0) + 1;
        }
      });

      const formatted = Object.entries(countMap)
        .map(([score, count]) => ({
          score: parseFloat(score),
          count,
        }))
        .sort((a, b) => b.count - a.count)
        .slice(0, 10);

      setData(formatted);
    })
    .catch((err) => {
      console.error("Error loading vulnerability data:", err);
    });
}, []);


  return (
    <div className="chart-box">
      <h2 className="chart-title">Top CVSS Scores</h2>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart layout="vertical" data={data} barSize={20}>
          <CartesianGrid strokeDasharray="3 3" vertical={false} />
          <XAxis
            type="number"
            label={{ value: "Count", position: "insideBottom", offset: -5 }}
            tick={{ fontSize: 12 }}
            axisLine={false}
            tickLine={false}
          />
          <YAxis
            dataKey="score"
            type="category"
            label={{
              value: "CVSS Score",
              angle: -90,
              position: "insideLeft",
              offset: 12,
            }}
            tick={{ fontSize: 12 }}
            axisLine={false}
            tickLine={false}
          />
          <Tooltip
            contentStyle={{ backgroundColor: "#ffffff", borderRadius: "8px", fontSize: "14px" }}
          />
          <Bar dataKey="count" radius={[6, 6, 6, 6]}>
            {data.map((_, index) => (
              <Cell key={index} fill={COLORS[index % COLORS.length]} />
            ))}
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

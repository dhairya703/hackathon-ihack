# services/vulnerability_service.py

import json
import time
import requests
from typing import Iterator
import os
from dotenv import load_dotenv
load_dotenv()

# Configuration
JSON_FILE_PATH = "data/vuln_scan2.json"
RESULT_FILE_PATH = "data/result.json"
NVD_API_KEY = os.getenv("NVD_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_URL = os.getenv("GEMINI_URL")

def call_gemini(prompt):
    headers = {"Content-Type": "application/json"}
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    try:
        response = requests.post(
            f"{GEMINI_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=payload
        )
        return response.json()["candidates"][0]["content"]["parts"][0]["text"].strip()
    except Exception as e:
        return f"[Gemini error] {str(e)}"

def query_nvd(cve_id):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    headers = {"apiKey": NVD_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return { "description": "N/A", "cvss": "N/A", "severity": "N/A" }

        items = response.json().get("vulnerabilities", [])
        if not items:
            return { "description": "N/A", "cvss": "N/A", "severity": "N/A" }

        cve = items[0].get("cve", {})
        description = next((d["value"] for d in cve.get("descriptions", []) if d["lang"] == "en"), "N/A")

        metrics = cve.get("metrics", {})
        cvss_data = {}
        if "cvssMetricV31" in metrics:
            cvss_data = metrics["cvssMetricV31"][0]["cvssData"]
        elif "cvssMetricV30" in metrics:
            cvss_data = metrics["cvssMetricV30"][0]["cvssData"]
        elif "cvssMetricV2" in metrics:
            cvss_data = metrics["cvssMetricV2"][0]["cvssData"]

        return {
            "description": description,
            "cvss": cvss_data.get("baseScore", "N/A"),
            "severity": cvss_data.get("baseSeverity", "N/A")
        }

    except Exception:
        return { "description": "N/A", "cvss": "N/A", "severity": "N/A" }

def format_cve_report(cve_data):
    if not cve_data or "vulnerabilities" not in cve_data:
        return "No data found.\n"
    entry = cve_data["vulnerabilities"][0]["cve"]
    cve_id = entry["id"]
    description = entry["descriptions"][0]["value"]
    score, severity = "N/A", "N/A"
    if "cvssMetricV31" in entry["metrics"]:
        metric = entry["metrics"]["cvssMetricV31"][0]["cvssData"]
        score, severity = metric["baseScore"], metric["baseSeverity"]
    elif "cvssMetricV2" in entry["metrics"]:
        metric = entry["metrics"]["cvssMetricV2"][0]["cvssData"]
        score = metric["baseScore"]
        severity = entry["metrics"]["cvssMetricV2"][0]["baseSeverity"]
    return (
        f"🔐 CVE ID: {cve_id}\n"
        f"📄 Description: {description}\n"
        f"🎯 CVSS Score: {score}\n"
        f"⚠️ Severity: {severity}\n"
        f"🔗 Link: https://nvd.nist.gov/vuln/detail/{cve_id}\n"
    )

def format_cve_json(cve_id, cve_data, remediation):
    return {
        "type": "cve",
        "id": cve_id,
        "is_exploit": False,
        "cvss": cve_data.get("cvss", "N/A"),
        "severity": cve_data.get("severity", "N/A"),
        "description": cve_data.get("description", "N/A"),
        "remediation": remediation,
        "link": f"https://nvd.nist.gov/vuln/detail/{cve_id}"
    }

def generate_vulnerability_report() -> Iterator[str]:
    results = []
    try:
        with open(JSON_FILE_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        yield f"❌ Error loading JSON: {e}\n"
        return

    total = len(data)
    yield f"🚀 Starting vulnerability report generation for {total} entries...\n\n"

    for idx, item in enumerate(data, 1):
        exploit_id = item.get("id", "Unknown")
        is_exploit = item.get("is_exploit", "false").lower() == "true"
        exploit_type = item.get("type", "Unknown")
        cvss = float(item.get("cvss", 0.0))

        severity = (
            "CRITICAL" if cvss >= 9.0 else
            "HIGH" if cvss >= 7.0 else
            "MEDIUM" if cvss >= 4.0 else
            "LOW"
        )

        yield f"[{idx}/{total}] 🔎 Processing {exploit_id}...\n"

        if exploit_id.startswith("CVE-"):
            cve_data = query_nvd(exploit_id)
            report = format_cve_report(cve_data)
            prompt = f"{cve_data}\nProvide a one-line remediation summary and patch."
            remediation = call_gemini(prompt)
            result = format_cve_json(exploit_id, cve_data, remediation)
        else:
            desc_prompt = f"Give a 1-line description of {exploit_type} vulnerability (severity: {severity}, exploit: {'yes' if is_exploit else 'no'}): {exploit_id}"
            remedy_prompt = f"Suggest a 1-line fix for this exploit: {exploit_id} ({exploit_type}, severity: {severity}). Explain in 1-2 lines. No generic steps."
            description = call_gemini(desc_prompt)
            remediation = call_gemini(remedy_prompt)

            result = {
                "type": "exploit",
                "id": exploit_id,
                "is_exploit": is_exploit,
                "exploit_type": exploit_type,
                "cvss": cvss,
                "severity": severity,
                "description": description,
                "remediation": remediation
            }

        results.append(result)
        time.sleep(1.5)

    with open(RESULT_FILE_PATH, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2)

    yield "\n✅ JSON report generation complete.\n"
